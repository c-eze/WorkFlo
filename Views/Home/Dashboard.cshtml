@using Microsoft.AspNetCore.Identity
@using AspnetCoreMvcFull.Services.Interfaces
@using AspnetCoreMvcFull.Models.Enums

@inject UserManager<BTUser> UserManager
@inject IBTRolesService RolesService

@model AspnetCoreMvcFull.Models.ViewModels.DashboardViewModel

@{
	ViewData["Title"] = "Dashboard";
	BTUser btUser = await UserManager.GetUserAsync(User); 
}

@section VendorScripts {
	<script src="~/vendor/libs/jquery/jquery.js"></script>
}

@* Overview *@
<div class="row">
	<div class="col-xxl-12 mb-6 order-0">
		<div class="card">
			<div class="d-flex align-items-start row">
				<div class="col-sm-7">
					<div class="card-body">
						<h5 class="card-title text-primary mb-3">Welcome, @btUser.FullName! ðŸŽ‰</h5> 
						<p>Developer for @Model.Tickets.Where(t => t.DeveloperUserId == btUser.Id).Count() Tickets</p>
						<p>Submitted @Model.Tickets.Where(t => t.OwnerUserId == btUser.Id).Count() Tickets</p>
						<p>Member on @Model.Projects.SelectMany(p => p.Members).Where(m => m.Id == btUser.Id).Count() Projects</p>
					</div>
				</div>
				<div class="col-sm-5 text-center text-sm-left">
					<div class="card-body pb-0 px-0 px-md-6">
						<img src="~/img/illustrations/man-with-laptop.png" height="175" alt="View Badge User">
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
@* / Overview *@

@*  Info Pills  *@
<div class="row row-cols-1 row-cols-md-4 mt-2">
	<div class="col mb-6">
		<a asp-action="AllProjects" asp-controller="Projects" style="text-decoration:none">
			<div class="card text-center">
				<div class="card-body">
					<div class="p-15">
						<h3>@Model.Projects.Where(p => p.StartDate < DateTime.Now && p.EndDate > DateTime.Now).Count()</h3>
						<span class="text-muted">Active Projects</span>
					</div>
				</div>
			</div>
		</a>
	</div>
	<div class="col mb-6">
		<a asp-action="AllTickets" asp-controller="Tickets" style="text-decoration:none">
			<div class="card text-center">
				<div class="card-body">
					<div class="p-15">
						<h3>@Model.Tickets.Count()</h3>
						<span class="text-muted">Total Tickets</span>
					</div>
				</div>
			</div>
		</a>
	</div>
	<div class="col mb-6">
		<div class="card text-center">
			<div class="card-body">
				<div class="p-15">
					<h3>@Model.Tickets.Where(t => string.IsNullOrEmpty(t.DeveloperUserId)).Count()</h3>
					<span class="text-muted">Unassigned Tickets</span>
				</div>
			</div>
		</div>
	</div>
	<div class="col mb-6">
		<div class="card text-center">
			<div class="card-body">
				<div class="p-15">
					<h3>@Model.Projects.SelectMany(p => p.Tickets).Where(t => t.TicketStatus.Name == nameof(BTTicketStatus.Resolved)).Count()</h3> 
					<span class="text-muted">Closed Tickets</span>
				</div>
			</div>
		</div>
	</div>
</div>
@*  / Info Pills  *@

@* Recent Activity *@
<div class="row">
	<div class="col-xxl-12 mb-6">
		<div class="card"> 
			<div class="card-body">
				<h5>Recent Activity</h5>
				<div class="table-responsive">
					<table class="table table-hover">
						<thead>
							<tr>
								@* Table header *@
								<th>Title</th>
								<th>Developer</th>
								<th>Status</th> 
								<th>Date</th> 
							</tr>
						</thead>
						<tbody>
							@* Table body *@
							@foreach (var ticket in Model.Tickets.OrderByDescending(d => d.Created).Take(5))
							{
								<tr>
									<td><a asp-action="Details" asp-controller="Tickets" asp-route-id="@ticket.Id"><strong>@ticket.Title</strong></a> </td>
									<td>
										@if (ticket.DeveloperUserId != null)
										{
											@ticket.DeveloperUser?.FullName
										}
										else
										{
											<span class="badge bg-warning text-dark">Unassigned</span>
										}
									</td>
									@if (ticket.TicketStatus.Name == "New")
									{
										<td><span class="badge bg-success rounded-pill">@ticket.TicketStatus.Name </span></td>
									}
									else
									{
										<td><span class="badge bg-secondary rounded-pill">@ticket.TicketStatus.Name </span></td>
									}
									<td><span style="font-size:small">@(ticket.Updated != null ? ticket.Updated.Value.ToString("MM/dd/yyyy") : ticket.Created.ToString("MM/dd/yyyy"))</span></td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			</div>
		</div>
	</div>
</div>
@* / Recent Activity *@

@*  Info Charts  *@
<div class="row row-cols-1 row-cols-md-2 g-2">
	<div class="col">
		<div class="card m-1 p-2 h-100">
			<div class="card-header">
				<h5>Tickets by Project</h5>
				<hr />
			</div>
			<div class="card-body">
				@*  ChartJS: Bar  *@
				<div class="col">
					<canvas id="projectTicketsChart"></canvas>
				</div>
			</div>
		</div>
	</div>
	<div class="col">
		<div class="card m-1 p-2 h-100">
			<div class="card-header">
				<h5>Tickets by Priority</h5>
				<hr />
			</div>
			<div class="card-body">
				@*  ChartJS: Pie  *@
				<div class="col">
					<canvas id="ticketsPriorityChart"></canvas>
				</div>
			</div>
		</div>
	</div>
	<div class="col">
		<div class="card m-1 p-2 h-100">
			<div class="card-header">
				<h5>Tickets by Developer</h5>
				<hr />
			</div>
			<div class="card-body">
				@*  ChartJS: Bar  *@
				<div class="col">
					<canvas id="ticketsDevChart"></canvas>
				</div>
			</div>
		</div>
	</div>
	<div class="col">
		<div class="card m-1 p-2 h-100">
			<div class="card-header">
				<h5>Tickets by Status</h5>
				<hr />
			</div>
			<div class="card-body">
				@*  ChartJS: Donut  *@
				<div class="col">
					<canvas id="donutChart"></canvas>
				</div>
			</div>
		</div>
	</div>
</div>
@*  / Info Charts  *@ 

@section PageScripts {
	<!-- *** Begin Chart JS Bar Chart *** -->
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
	<script>
		$.ajax({
			type: "POST",
			url: "/Home/CjsProjectTickets",
			data: '{}',
			contentType: "application/json; charset=utf-8",
			dataType: "json",
			success: function (result) {
				new Chart(document.getElementById('projectTicketsChart'), {
					type: 'bar',
					data: {
						labels: result.flatMap(([name, count]) => [name]),
						datasets: [{
							//label: 'Ticket Count',
							axis: 'y',
							data: result.flatMap(([name, count]) => [count]),
							backgroundColor: [
								'rgba(255, 99, 132)',  //red
								'rgba(75, 192, 192)',  //green
								'rgba(54, 162, 235)'   //blue
							]
							// ],
							// borderColor: [
							// 	'rgb(255, 99, 132)',  //red
							// 	'rgb(75, 192, 192)',  //green
							// 	'rgb(54, 162, 235)'   //blue
							// ],
							// borderWidth: 1
						}]
					},
					options: {
						indexAxis: 'y',
						plugins: {
							legend: {
								display: false
							}
						},
						layout: {
							padding: {
								top: 50
							}
						}
					}
				});

			},
			failure: function (result) {
				alert(result.d);
			},
			error: function (result) {
				alert(result.d);
			}
		});

	</script>
	<script>
		$.ajax({
			type: "POST",
			url: "/Home/CjsTicketsDev",
			data: '{}',
			contentType: "application/json; charset=utf-8",
			dataType: "json",
			success: function (result) {
				new Chart(document.getElementById('ticketsDevChart'), {
					type: 'bar',
					data: {
						labels: result.flatMap(([name, count]) => [name]),
						datasets: [{
							axis: 'y',
							data: result.flatMap(([name, count]) => [count]),
							backgroundColor: [
								'rgba(54, 162, 235)',   //blue
								'rgb(153, 102, 255)',  //purple
								'rgba(75, 192, 192)',  //green
								'rgb(255, 159, 64)',   //orange
								'rgb(255, 205, 86)',   //yellow
								'rgba(255, 99, 132)'   //red
							]
						}]
					},
					options: {
						indexAxis: 'y',
						plugins: {
							legend: {
								display: false
							}
						},
						layout: {
							padding: {
								top: 50
							}
						}
					}
				});

			},
			failure: function (result) {
				alert(result.d);
			},
			error: function (result) {
				alert(result.d);
			}
		});

	</script>
	@* <script>
		new Chart(document.getElementById('ticketsTypeChart'), {
			type: 'doughnut',
			data: {
				labels: [
					'@nameof(BTTicketType.NewDevelopment)',
					'@nameof(BTTicketType.GeneralTask)',
					'@nameof(BTTicketType.WorkTask)',
					'@nameof(BTTicketType.Enhancement)',
					'@nameof(BTTicketType.ChangeRequest)',
					'@nameof(BTTicketType.Defect)'
					],
				datasets: [{
					data: [
		@Model.Tickets.Where(t => t.TicketType.Name == nameof(BTTicketType.NewDevelopment)).Count(),
		@Model.Tickets.Where(t => t.TicketType.Name == nameof(BTTicketType.GeneralTask)).Count(),
		@Model.Tickets.Where(t => t.TicketType.Name == nameof(BTTicketType.WorkTask)).Count(),
		@Model.Tickets.Where(t => t.TicketType.Name == nameof(BTTicketType.Enhancement)).Count(),
		@Model.Tickets.Where(t => t.TicketType.Name == nameof(BTTicketType.ChangeRequest)).Count(),
		@Model.Tickets.Where(t => t.TicketType.Name == nameof(BTTicketType.Defect)).Count()
					],
					backgroundColor: [
						'rgba(54, 162, 235)',   //blue
						'rgb(153, 102, 255)',  //purple
						'rgba(75, 192, 192)',  //green
						'rgb(255, 159, 64)',   //orange
						'rgb(255, 205, 86)',   //yellow
						'rgba(255, 99, 132)'   //red
					]
				}]
			},
			options: {
				plugins: {
					legend: {
						position: 'right'
					}
				},
			}
		});
	</script> *@
	<script>
		new Chart(document.getElementById('ticketsPriorityChart'), {
			type: 'pie',
			data: {
				labels: [
					'@nameof(BTTicketPriority.Low)',
					'@nameof(BTTicketPriority.Medium)',
					'@nameof(BTTicketPriority.High)',
					'@nameof(BTTicketPriority.Urgent)'
					],
				datasets: [{
					data: [
		@Model.Tickets.Where(t => t.TicketPriority.Name == nameof(BTTicketPriority.Low)).Count(),
		@Model.Tickets.Where(t => t.TicketPriority.Name == nameof(BTTicketPriority.Medium)).Count(),
		@Model.Tickets.Where(t => t.TicketPriority.Name == nameof(BTTicketPriority.High)).Count(),
		@Model.Tickets.Where(t => t.TicketPriority.Name == nameof(BTTicketPriority.Urgent)).Count()
					],
					backgroundColor: [
						'rgba(75, 192, 192)',  //green
						'rgba(54, 162, 235)',   //blue
						'rgb(255, 159, 64)',   //orange
						'rgba(255, 99, 132)'   //red
					]
				}]
			},
			options: {
				maintainAspectRatio: false,
				plugins: {
					legend: {
						position: 'right'
					}
				},
			}
		});
	</script>
	<!-- *** Begin Chart JS Pie/Donut *** -->
	<script src="https://cdn.jsdelivr.net/npm/chart.js@3.6.0/dist/chart.min.js"></script>
	<script>

		var donutChartCanvas = document.getElementById('donutChart'); //$('#donutChart').get(0).getContext('2d');
		var donutData = {
			labels: [
				'@nameof(BTTicketStatus.Development)',
				'@nameof(BTTicketStatus.New)',
				'@nameof(BTTicketStatus.Resolved)',
				'@nameof(BTTicketStatus.Testing)'
			],
			datasets: [
				{
					data: [
		@Model.Tickets.Where(t => t.TicketStatus.Name == nameof(BTTicketStatus.Development)).Count(),
		@Model.Tickets.Where(t => t.TicketStatus.Name == nameof(BTTicketStatus.New)).Count(),
		@Model.Tickets.Where(t => t.TicketStatus.Name == nameof(BTTicketStatus.Resolved)).Count(),
		@Model.Tickets.Where(t => t.TicketStatus.Name == nameof(BTTicketStatus.Testing)).Count()
						],
					backgroundColor: [
						'rgba(255, 99, 132)',
						'rgba(54, 162, 235)',
						'rgba(75, 192, 192)',
						'rgba(255, 206, 86)'
					]
				}
			]
		};

		var donutOptions = {
			maintainAspectRatio: false,
			plugins: {
				legend: {
					position: 'right'
				}
			}
		};
		//Create pie or douhnut chart
		// You can switch between pie and douhnut using the method below.
		new Chart(donutChartCanvas, {
			type: 'doughnut',
			data: donutData,
			options: donutOptions
		});
	</script>
	<!-- *** End Chart JS Donut *** --> 
}
